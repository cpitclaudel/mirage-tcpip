let check_result r =
  match r with
  | Result.Ok x -> x
  | _ -> failwith "Failed"

let must o =
  match o with
  | Some x -> x
  | _ -> failwith "Failed"

let arp_c = Cstruct.of_string "\x00\x01\x08\x00\x06\x04\x00\x01\x48\x51\xb7\x0e\x98\x59\x80\x1e\x09\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

let ether_c = Cstruct.of_string "\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x08\x00\x45\x00\x00\x28\x00\x01\x00\x00\x40\x06\x7c\xcd\x7f\x00\x00\x01\x7f\x00\x00\x01\x00\x14\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x50\x02\x20\x00\x91\x7c\x00\x00"

let ip_c = Cstruct.of_string "\x45\x00\x00\x28\x00\x01\x00\x00\x40\x06\x7c\xcd\x7f\x00\x00\x01\x7f\x00\x00\x01\x00\x14\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x50\x02\x20\x00\x91\x7c\x00\x00"

let tcp_small_c = Cstruct.of_string "\x00\x14\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x50\x02\x20\x00\x91\x7c\x00\x00"

let udp_small_c = Cstruct.of_string "\x00\x35\x00\x35\x00\x08\x01\x72"

let tcp_medium_c = Cstruct.of_string "\x00\x14\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x50\x02\x20\x00\x1e\xc4\x00\x00\x41\x63\x63\x65\x70\x74\x3a\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x69\x6d\x61\x67\x65\x2f\x77\x65\x62\x70\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x38\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x67\x7a\x69\x70\x2c\x20\x64\x65\x66\x6c\x61\x74\x65\x2c\x20\x73\x64\x63\x68\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x66\x72\x2d\x46\x52\x2c\x66\x72\x3b\x71\x3d\x30\x2e\x38\x2c\x65\x6e\x2d\x55\x53\x3b\x71\x3d\x30\x2e\x36\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x34\x2c\x65\x6e\x2d\x47\x42\x3b\x71\x3d\x30\x2e\x32\x0a\x43\x61\x63\x68\x65\x2d\x43\x6f\x6e\x74\x72\x6f\x6c\x3a\x6e\x6f\x2d\x63\x61\x63\x68\x65\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65\x0a\x44\x4e\x54\x3a\x31\x0a\x48\x6f\x73\x74\x3a\x31\x30\x2e\x30\x2e\x30\x2e\x32\x3a\x38\x30\x38\x30\x0a\x50\x72\x61\x67\x6d\x61\x3a\x6e\x6f\x2d\x63\x61\x63\x68\x65\x0a\x55\x70\x67\x72\x61\x64\x65\x2d\x49\x6e\x73\x65\x63\x75\x72\x65\x2d\x52\x65\x71\x75\x65\x73\x74\x73\x3a\x31\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31\x3b\x20\x4c\x69\x6e\x75\x78\x20\x78\x38\x36\x5f\x36\x34\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x37\x2e\x33\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x55\x62\x75\x6e\x74\x75\x20\x43\x68\x72\x6f\x6d\x69\x75\x6d\x2f\x35\x33\x2e\x30\x2e\x32\x37\x38\x35\x2e\x31\x34\x33\x20\x43\x68\x72\x6f\x6d\x65\x2f\x35\x33\x2e\x30\x2e\x32\x37\x38\x35\x2e\x31\x34\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x37\x2e\x33\x36"

let udp_medium_c = Cstruct.of_string "\x00\x35\x00\x35\x01\xc2\x8c\xff\x41\x63\x63\x65\x70\x74\x3a\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x69\x6d\x61\x67\x65\x2f\x77\x65\x62\x70\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x38\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x67\x7a\x69\x70\x2c\x20\x64\x65\x66\x6c\x61\x74\x65\x2c\x20\x73\x64\x63\x68\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x66\x72\x2d\x46\x52\x2c\x66\x72\x3b\x71\x3d\x30\x2e\x38\x2c\x65\x6e\x2d\x55\x53\x3b\x71\x3d\x30\x2e\x36\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x34\x2c\x65\x6e\x2d\x47\x42\x3b\x71\x3d\x30\x2e\x32\x0a\x43\x61\x63\x68\x65\x2d\x43\x6f\x6e\x74\x72\x6f\x6c\x3a\x6e\x6f\x2d\x63\x61\x63\x68\x65\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65\x0a\x44\x4e\x54\x3a\x31\x0a\x48\x6f\x73\x74\x3a\x31\x30\x2e\x30\x2e\x30\x2e\x32\x3a\x38\x30\x38\x30\x0a\x50\x72\x61\x67\x6d\x61\x3a\x6e\x6f\x2d\x63\x61\x63\x68\x65\x0a\x55\x70\x67\x72\x61\x64\x65\x2d\x49\x6e\x73\x65\x63\x75\x72\x65\x2d\x52\x65\x71\x75\x65\x73\x74\x73\x3a\x31\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31\x3b\x20\x4c\x69\x6e\x75\x78\x20\x78\x38\x36\x5f\x36\x34\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x37\x2e\x33\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x55\x62\x75\x6e\x74\x75\x20\x43\x68\x72\x6f\x6d\x69\x75\x6d\x2f\x35\x33\x2e\x30\x2e\x32\x37\x38\x35\x2e\x31\x34\x33\x20\x43\x68\x72\x6f\x6d\x65\x2f\x35\x33\x2e\x30\x2e\x32\x37\x38\x35\x2e\x31\x34\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x37\x2e\x33\x36"

let ip_pkt = fst (check_result (Ipv4_packet.Unmarshal.of_cstruct ip_c))

let repeats = 1_000_000

let bench f input () =
  for _ = 1 to repeats do
    ignore (f input)
  done;
  Lwt.return_unit

let localhost = Ipaddr.of_string_exn "127.0.0.1"
let src, srcv4 = localhost, must (Ipaddr.to_v4 localhost)
let dst, dstv4 = localhost, must (Ipaddr.to_v4 localhost)

let tight_arp_dec buf = check_result (Arpv4_packet.Unmarshal.of_cstruct buf)

let tight_ether_dec buf = check_result (Ethif_packet.Unmarshal.of_cstruct buf)

let enc_buf = Cstruct.create 1024

let tight_ipv4_enc pkt = check_result (Ipv4_packet.Marshal.into_cstruct ~payload_len:0 pkt enc_buf)

let tight_ipv4_dec buf = check_result (Ipv4_packet.Unmarshal.of_cstruct buf)

let tight_tcp_dec buf = check_result (Tcp.Tcp_packet.Unmarshal.of_cstruct src dst buf)

let tight_udp_dec buf = check_result (Udp_packet.Unmarshal.of_cstruct src dst buf)

let tcp_small_pkt, tcp_small_payload = tight_tcp_dec tcp_small_c
let udp_small_pkt, udp_small_payload = tight_udp_dec udp_small_c
let tcp_medium_pkt, tcp_medium_payload = tight_tcp_dec tcp_medium_c
let udp_medium_pkt, udp_medium_payload = tight_udp_dec udp_medium_c

let pseudoheader proto payload () =
  Ipv4_packet.Marshal.pseudoheader ~src:srcv4 ~dst:dstv4 ~proto
    (Tcp.Tcp_wire.sizeof_tcp + 0 (* options *) + Cstruct.len payload)

let tight_tcp_enc (pkt, payload) = check_result (Tcp.Tcp_packet.Marshal.into_cstruct
                                                ~src ~dst ~payload
                                                ~pseudoheader:(pseudoheader `TCP payload) pkt enc_buf)

let tight_udp_enc (pkt, payload) = check_result (Udp_packet.Marshal.into_cstruct
                                                ~src ~dst ~payload
                                                ~pseudoheader:(pseudoheader `UDP payload) pkt enc_buf)

let suite = [
    "arp-dec", `Quick, (bench tight_arp_dec arp_c);
    "ether-dec", `Quick, (bench tight_ether_dec ether_c);
    "ipv4-enc", `Quick, (bench tight_ipv4_enc ip_pkt);
    "ipv4-dec", `Quick, (bench tight_ipv4_dec ip_c);
    "tcp-enc-s", `Quick, (bench tight_tcp_enc (tcp_small_pkt, tcp_small_payload));
    "tcp-dec-s", `Quick, (bench tight_tcp_dec tcp_small_c);
    "udp-enc-s", `Quick, (bench tight_udp_enc (udp_small_pkt, udp_small_payload));
    "udp-dec-s", `Quick, (bench tight_udp_dec udp_small_c);
    "tcp-enc-m", `Quick, (bench tight_tcp_enc (tcp_medium_pkt, tcp_medium_payload));
    "tcp-dec-m", `Quick, (bench tight_tcp_dec tcp_medium_c);
    "udp-enc-m", `Quick, (bench tight_udp_enc (udp_medium_pkt, udp_medium_payload));
    "udp-dec-m", `Quick, (bench tight_udp_dec udp_medium_c);
]
